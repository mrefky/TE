package main

import (
    "fmt"
    "net/http"
    _ "github.com/go-sql-driver/mysql"
    "database/sql"
    "os"
    "html/template"
)

type Employee struct {
    Fname, Sname, Dname, Email string
}

func helloWorld(w http.ResponseWriter, r *http.Request){
    name, err := os.Hostname()
    checkErr(err)
    fmt.Fprintf(w, "HOSTNAME : %s\n", name)
}

func dbConnect() (db *sql.DB) {
    dbDriver := "mysql"
    dbUser := "root"
    //dbPass := ""
    dbHost := "192.168.1.52"
    dbPort := "3306"
    dbName := "test"
    db, err := sql.Open(dbDriver, dbUser +"@tcp("+ dbHost +":"+ dbPort +")/"+ dbName +"?charset=utf8")
    checkErr(err)
    return db
}

func dbSelect() []Employee{
    db := dbConnect()
    rows, err := db.Query("select * from employees")
    checkErr(err)

    employee := Employee{}
    employees := []Employee{}

    for rows.Next() {
        var First_name, Last_name, Department, Email string
        err = rows.Scan(&First_name, &Last_name, &Department, &Email)
        checkErr(err)
        employee.Fname = First_name
        employee.Sname = Last_name
        employee.Dname = Department
        employee.Email = Email
        employees = append(employees, employee)

    }
    defer db.Close()
    //fmt.Println(employees)
    return employees
}

var tmpl = template.Must(template.ParseFiles("layout.html"))
//var tmpl = template.Must(template.ParseGlob("layout.html"))
func dbTableHtml(w http.ResponseWriter, r *http.Request){
    table := dbSelect()
    err := tmpl.ExecuteTemplate(w, "Index", table)
    if err != nil {
	        // Do something with the error
		fmt.Println("ERR")

	}
    //tmpl.ExecuteTemplate(w, "Index", table)
}

func dbTable(w http.ResponseWriter, r *http.Request){
    table := dbSelect()
    for i := range(table) {
        emp := table[i]
        fmt.Fprintf(w,"YESS|%12s|%12s|%12s|%20s|\n" ,emp.Fname ,emp.Sname ,emp.Dname ,emp.Email)
    }
}

func main() {
    http.HandleFunc("/", helloWorld)
    http.HandleFunc("/view", dbTableHtml) 
    http.HandleFunc("/raw", dbTable)
    http.ListenAndServe(":8080", nil)
}

func checkErr(err error) {
    if err != nil {
        panic(err)
    }
}
